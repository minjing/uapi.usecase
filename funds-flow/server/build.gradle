/*
 * Copyright (C) 2018. The UAPI Authors
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at the LICENSE file.
 *
 * You must gained the permission from the authors if you want to
 * use the project into a commercial product
 */

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'

ext.project_version = getProjectVersion()
ext.publish_repo    = getMavenRepo()

group = "${project_group}"
version = "${project_version}"
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
    maven { url "http://dl.bintray.com/inactionware/maven-snapshot" }
    maven { url "http://dl.bintray.com/inactionware/maven-release" }
}

dependencies {
    compileOnly (
            "uapi:uapi.service.apt:${uapi_cornerstone_version}",
            "uapi:uapi.behavior.apt:${uapi_cornerstone_version}",
            "uapi:uapi.net.apt:${uapi_facility_version}"
    )

    compile (
            "uapi:uapi.common:${uapi_base_version}",
            "uapi:uapi.exception:${uapi_base_version}",
            "uapi:uapi.service:${uapi_cornerstone_version}",
            "uapi:uapi.behavior:${uapi_cornerstone_version}",
            "uapi:uapi.net:${uapi_facility_version}",
            "uapi:uapi.net.http:${uapi_facility_version}",
            "uapi:uapi.app.terminal:${uapi_facility_version}",
            "uapi:uapi.protocol:${uapi_facility_version}",
            "uapi:uapi.protocol.graphql:${uapi_facility_version}"
    )

    runtime (
            "uapi:uapi.net.http.netty:${uapi_facility_version}"
    )
}

jar {
    manifest.attributes
    exclude('**/*.java')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

def generatedSources = ['**/*_Generated.*']

task wrapper(type: Wrapper) {
    gradleVersion = "${gradle_version}"
}

def getProjectVersion() {
    def release = project.hasProperty("project_release") ? project.project_release.toBoolean() : null
    def rcno = project.hasProperty("project_rcno") ? project.project_rcno.toInteger() : null
    def prjVer = "${project_version_major}.${project_version_minor}.${project_version_fix}"
    if (release) {
        return "${prjVer}-release"
    } else if (rcno > 0) {
        return "${prjVer}-rc${rcno}"
    } else {
        def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
        timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
        def ts = timestampFormat.format(new Date())
        return "${prjVer}-${ts}"
    }
}

def getMavenRepo() {
    if (project.project_release.toBoolean()) {
        return 'maven-release'
    } else {
        return 'maven-snapshot'
    }
}
