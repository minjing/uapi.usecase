/*
 * Copyright (C) 2018. The UAPI Authors
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at the LICENSE file.
 *
 * You must gained the permission from the authors if you want to
 * use the project into a commercial product
 */

ext {
    thisRepo = 'usecase'
}

apply from: '.config/uapi/all.config.gradle'
apply from: '.config/uapi/base.config.gradle'
apply from: '.config/uapi/cornerstone.config.gradle'
apply from: '.config/uapi/facility.config.gradle'
apply from: '.config/uapi/usecase.config.gradle'
apply from: '.config/uapi/functions.gradle'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = "${allCfg.group}"
version = getBuildVersion(project.name)
sourceCompatibility = 11
targetCompatibility = 11

// repositories {
//     mavenLocal()
//     mavenCentral()
//     jcenter()
//     maven { url "http://dl.bintray.com/typesafe/maven-releases" }
//     maven { url "http://dl.bintray.com/inactionware/maven-snapshot" }
//     maven { url "http://dl.bintray.com/inactionware/maven-release" }
// }

dependencies {
    compileOnly (
        coordinate(cornerstoneProjects.service_apt),
        coordinate(cornerstoneProjects.config_apt),
        coordinate(cornerstoneProjects.behavior_apt),
        coordinate(facilityProjects.net_apt)
    )

    annotationProcessor (
        coordinate(cornerstoneProjects.service_apt),
        coordinate(cornerstoneProjects.config_apt),
        coordinate(cornerstoneProjects.behavior_apt),
        coordinate(facilityProjects.net_apt),
        coordinate(baseProjects.codegen)
    )

    compile (
        coordinate(baseProjects.common),
        coordinate(baseProjects.exception),
        coordinate(cornerstoneProjects.service),
        coordinate(cornerstoneProjects.command),
        coordinate(cornerstoneProjects.behavior),
        coordinate(cornerstoneProjects.app),
        coordinate(facilityProjects.net),
        coordinate(facilityProjects.net_http),
        coordinate(facilityProjects.app_terminal),
        coordinate(facilityProjects.protocol)
    )

    runtime (
        coordinate(facilityProjects.net_http_netty),
        coordinate(facilityProjects.protocol_graphql)
    )
}

ext.moduleName = "${project.name}"

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

jar {
    manifest.attributes
    exclude('**/*.java')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

def generatedSources = ['**/*_Generated.*']
